<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Overload on Air on G</title>
    <link>http://air.googol.im/tags/overload/</link>
    <description>Recent content in Overload on Air on G</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>除非另有声明，本网站采用&lt;a href=&#39;https://creativecommons.org/licenses/by-nd/3.0/cn/&#39;&gt;知识共享“署名-禁止演绎 3.0 中国大陆”许可协议&lt;/a&gt;授权。</copyright>
    <lastBuildDate>Wed, 13 Jun 2007 20:00:00 +0800</lastBuildDate>
    <atom:link href="http://air.googol.im/tags/overload/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>C&#43;&#43;中的重载问题</title>
      <link>http://air.googol.im/post/overload-in-cpp/</link>
      <pubDate>Wed, 13 Jun 2007 20:00:00 +0800</pubDate>
      
      <guid>http://air.googol.im/post/overload-in-cpp/</guid>
      <description>&lt;p&gt;话说有这样的一族函数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void insert(BaseWidget* w,  int i = -1);
void insert(ThinWidget* w,  int i = -1);
void insert(ThickWidget* w, int i = -1);
void insert(BigWidget* w,   int i = -1);
void insert(SmallWidget* w, int i = -1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中xWidget都继承自BaseWidget。这些函数大体功能都一样，只是细微上有一点差别，比如要对BigWidget重新做布局，或者设置ThickWidget的边框。&lt;/p&gt;

&lt;p&gt;然后，有人把这些东西改成：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void insert(BaseWidget* w,  int i = -1);
void insert(ThinWidget* w,  int i);
void insert(ThickWidget* w, int i);
void insert(BigWidget* w,   int i);
void insert(SmallWidget* w, int i);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果会怎么样呢？&lt;/p&gt;

&lt;p&gt;那就是，所有忽略i值的调用都会自动转向：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;insert(BaseWidget* w,  int i = -1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译不会出错，运行不会出错，行为…………自然就出错了………………&lt;/p&gt;

&lt;p&gt;原因是，如果有ThinWidget *thinW，那么调用：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;insert(thinW)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最初的设计会调用重载：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void insert(ThinWidget* w,  int i = -1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但如过按照后来的设计，由于最后一个参数i没有默认值，调用也就无法匹配到正确的函数，只好退而求其次，寻找父类匹配，结果就调用到了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void insert(BaseWidget* w,  int i = -1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;考虑到C++一般是定义声明分离，而且默认参数的定义是写在声明里，所以，你就等着一头雾水的解Bug吧。&lt;/p&gt;

&lt;p&gt;我这两天就闷了几头雾水解这个bug，查到结果后，郁闷死了，那些声明是另一个同事改的，说是为了明确函数声明……&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>