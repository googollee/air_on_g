<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Concurrency on Air On G</title>
    <link>https://air.googol.im/tags/concurrency/</link>
    <description>Recent content in Concurrency on Air On G</description>
    <generator>Hugo -- 0.136.2</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 15 Mar 2014 10:52:46 +0800</lastBuildDate>
    <atom:link href="https://air.googol.im/tags/concurrency/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go并发模式：管道和取消</title>
      <link>https://air.googol.im/posts/go-concurrency-patterns-pipelines-and-cancellation/</link>
      <pubDate>Sat, 15 Mar 2014 10:52:46 +0800</pubDate>
      <guid>https://air.googol.im/posts/go-concurrency-patterns-pipelines-and-cancellation/</guid>
      <description>&lt;p&gt;译自&lt;a href=&#34;http://blog.golang.org/pipelines&#34;&gt;http://blog.golang.org/pipelines&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这是Go官方blog的一篇文章，介绍了如何使用Go来编写并发程序，并按照程序的演化顺序，介绍了不同模式遇到的问题以及解决的问题。主要解释了用管道模式链接不同的线程，以及如何在某个线程取消工作时，保证所有线程以及管道资源的正常回收。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
