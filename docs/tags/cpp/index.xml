<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cpp on Air on G</title>
    <link>https://air.googol.im/tags/cpp/</link>
    <description>Recent content in cpp on Air on G</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 28 Nov 2009 20:00:00 +0800</lastBuildDate><atom:link href="https://air.googol.im/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>简单的UnitTest框架实现</title>
      <link>https://air.googol.im/post/simple-unittest-framework/</link>
      <pubDate>Sat, 28 Nov 2009 20:00:00 +0800</pubDate>
      
      <guid>https://air.googol.im/post/simple-unittest-framework/</guid>
      <description>&lt;p&gt;这几天试了下TDD，需要一个UnitTest框架。以前用过Google Test和JUnit，不过想了一下，印象里Google Test经过几次升级后，似乎只能单独编译，而JUnit只能用在Java里，都不适合嵌入式运行的场合。所以花了半天左右自己写了个框架。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于C&#43;&#43;智能指针的思考</title>
      <link>https://air.googol.im/post/thinking-of-cpp-ptr/</link>
      <pubDate>Sat, 07 Nov 2009 20:00:00 +0800</pubDate>
      
      <guid>https://air.googol.im/post/thinking-of-cpp-ptr/</guid>
      <description>&lt;p&gt;最近在公司的项目里开始实践用C++的析构来自动释放已申请的指针，同时保证程序的效率不变。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>尝试用C&#43;&#43;实现Y Combinator（之三）</title>
      <link>https://air.googol.im/post/implement-y-combinator-in-cpp-3/</link>
      <pubDate>Sat, 22 Sep 2007 20:00:00 +0800</pubDate>
      
      <guid>https://air.googol.im/post/implement-y-combinator-in-cpp-3/</guid>
      <description>&lt;p&gt;基本上，又进行了几次失败的尝试，具体过程不写了，反正写了也没人看。（其实是我没有存……）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>尝试用C&#43;&#43;实现Y Combinator（之二）</title>
      <link>https://air.googol.im/post/implement-y-combinator-in-cpp-2/</link>
      <pubDate>Thu, 06 Sep 2007 20:00:00 +0800</pubDate>
      
      <guid>https://air.googol.im/post/implement-y-combinator-in-cpp-2/</guid>
      <description>&lt;p&gt;恩……上篇没写完……&lt;/p&gt;
&lt;p&gt;其实，上篇还写错了……&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>尝试用C&#43;&#43;实现Y Combinator（之一）</title>
      <link>https://air.googol.im/post/implement-y-combinator-in-cpp-1/</link>
      <pubDate>Sat, 01 Sep 2007 20:00:00 +0800</pubDate>
      
      <guid>https://air.googol.im/post/implement-y-combinator-in-cpp-1/</guid>
      <description>&lt;p&gt;恩……程序员的一大特点：看到别人有个轮子，就想自己动手造个出来……（这样不好，不好……）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;中的重载问题</title>
      <link>https://air.googol.im/post/overload-in-cpp/</link>
      <pubDate>Wed, 13 Jun 2007 20:00:00 +0800</pubDate>
      
      <guid>https://air.googol.im/post/overload-in-cpp/</guid>
      <description>&lt;p&gt;话说有这样的一族函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(BaseWidget&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w,  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(ThinWidget&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w,  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(ThickWidget&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(BigWidget&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w,   &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(SmallWidget&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>关于C&#43;&#43;中的new的一些处理</title>
      <link>https://air.googol.im/post/about-new-in-cpp/</link>
      <pubDate>Sat, 20 Jan 2007 20:00:00 +0800</pubDate>
      
      <guid>https://air.googol.im/post/about-new-in-cpp/</guid>
      <description>&lt;p&gt;首先的一点是，C++中new失败后，默认抛异常bad_alloc()，也就是说，判断返回值是否为NULL的方法在现代编译器面前毫无用处——判断执行之前，程序就随着异常的栈展开而销毁了！&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
