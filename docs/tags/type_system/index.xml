<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Type_system on Air on G</title>
    <link>http://air.googol.im/tags/type_system/</link>
    <description>Recent content in Type_system on Air on G</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>除非另有声明，本网站采用&lt;a href=&#39;https://creativecommons.org/licenses/by-nd/3.0/cn/&#39;&gt;知识共享“署名-禁止演绎 3.0 中国大陆”许可协议&lt;/a&gt;授权。</copyright>
    <lastBuildDate>Mon, 31 Dec 2007 16:11:00 +0800</lastBuildDate>
    <atom:link href="http://air.googol.im/tags/type_system/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>通过context/defer/promise介绍monad</title>
      <link>http://air.googol.im/post/introduce-monad/</link>
      <pubDate>Mon, 31 Dec 2007 16:11:00 +0800</pubDate>
      
      <guid>http://air.googol.im/post/introduce-monad/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func DeferUsage() {
  from, _ := os.Open(&#39;/proc/stat&#39;)
  defer from.Close()

  to, _ := ioutil.TempFile(&amp;quot;&amp;quot;, &amp;quot;defer&amp;quot;)
  defer to.Close()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func DeferUsage() {
  deferMonad := defer.Background()

  from, _ := os.Open(&#39;/proc/stat&#39;)
  deferMonad = defer(deferMonad, from.Close)

  to, _ := ioutil.TempFile(&amp;quot;&amp;quot;, &amp;quot;defer&amp;quot;)
  deferMonad = defer(deferMonad, to.Close)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func DeferUsage() {
  defer.Background().Call(func() {
    from, _ := os.Open(&#39;/proc/stat&#39;)
    return from.Close
  }).Call(func() {
    to, _ := ioutil.TempFile(&amp;quot;&amp;quot;, &amp;quot;defer&amp;quot;)
    return to.Close
  }).Do()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func ContextHandler() {
  timeout := 10*time.Second

  ctx := context.Background()
  ctx = context.WithValue(ctx, &amp;quot;user&amp;quot;, &amp;quot;id-123&amp;quot;)
  ctx1, cancel1 := context.WithTimeout(ctx, timeout)
  done := make(chan bool)
  go func() {
    fork1(ctx1)
    close(done)
  }()

  select {
  case &amp;lt;-done:
    // succeed
  case &amp;lt;-time.After(timeout):
    // timeout
  }
  cancel1()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func ContextHandler() {
  timeout := 10*time.Second

  ctx := context.Background()

  ctx = context.WithValue(ctx, &amp;quot;user&amp;quot;, &amp;quot;id-123&amp;quot;)

  ctx1, cancel1 := context.WithTimeout(ctx, timeout)

  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function promise() {
  return readFile(&amp;quot;~/data.js&amp;quot;)
    .then(JSON.parse)
    .resolve();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Promise() {
  p := promise.Background()

  p = readFile(&amp;quot;~/data.js&amp;quot;)

  p = promise.Then(p, JSON.parse)

  return p.resolve()
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>